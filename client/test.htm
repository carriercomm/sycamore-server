<script type="text/javascript" src="json2.js"></script>
<script type="text/javascript" src="jquery.min.js"></script>
<script type="text/javascript" src="socket.io.js"></script>
<script type="text/javascript">

io.setPath('./');


function serverConnection(config){

	var self = this;

	this.config = config;
	this.online = false;
	this.pingTimer = null;
	this.everConnected = false;
	this.lastConnected = new Date().getTime();
	this.eventHandlers = {};

	this.socket = new io.Socket(config.host, {
		port: config.port
		//transports: ['xhr-polling']
	});


	//
	// set up the socket object
	//

	this.socket.on('connect', function(){
		self.emit('status', true, 'Connected', 0);
		self.everConnected = true;
		self.lastConnected = new Date().getTime();
		self.startPing();
	});

	this.socket.on('close', function(){
		//console.log('closed');
	});

	this.socket.on('disconnect', function(){
		self.emit('status', false, 'Disconnected');
		self.lastConnected = new Date().getTime();
		self.reconnect();
		//console.log('disconnected');
	});

	this.socket.on('message', function(data){

		if (data.msg == 'pong'){
			if (!self.socket.connected) return;
			var diff = (new Date().getTime()) - data.t;
			if (diff < 0) diff = 0;
			self.emit('status', true, 'Connected', diff);
			//console.log('lag: '+diff);
			return;
		}

		self.emit('message', data);
	});


	//
	// event handlers
	//

	this.on = function(ev, f){
		if (!self.eventHandlers[ev]){
			self.eventHandlers[ev] = [];
		}
		self.eventHandlers[ev].push(f);
	};

	this.emit = function(){
		var args = Array.prototype.slice.call(arguments);
		var ev = args.shift();
		if (self.eventHandlers[ev]){
			for (var i=0; i<self.eventHandlers[ev].length; i++){
				var f = self.eventHandlers[ev][i];
				f.apply(self, args);
			}
		}
	}


	//
	// the real guts
	//

	this.firstconnect = function(){

		self.online = true;
		self.emit('status', false, 'Connecting...');
		self.socket.connect();
		self.socket.send({msg: 'some data'});
		self.startPing();
	}

	this.reconnect = function(){
		if (!self.online) return;

		// how long have we been trying?
		var n = new Date().getTime();
		var diff = n - self.lastConnected;
		if (diff > self.config.giveup_interval){
			//console.log('trying for too long - giving up');
			self.emit('status', false, 'Disconnected');
			self.stopPing();

			// we mark this as 'connected' so that when we try and
			// go online again, we say we're reconnecting.
			self.everConnected = true;
			return;
		}

		if (self.everConnected){
			self.emit('status', false, 'Reconnecting...');
			self.socket.connect();
		}
	}

	this.startPing = function(){
		if (self.pingTimer) return;
		self.pingTimer = window.setInterval(function(){ self.ping(); }, self.config.ping_interval);
	}

	this.stopPing = function(){
		if (!self.pingTimer) return;
		window.clearInterval(self.pingTimer);
		self.pingTimer = null;
	}

	this.ping = function(){
		if (!self.socket.connected){
			self.reconnect();
			return;
		}
		self.socket.send({msg: 'ping', t: new Date().getTime()});
	}

	this.go_online = function(){
		self.online = true;
		self.lastConnected = new Date().getTime();
		this.startPing();
		self.ping();
	}

	this.go_offline = function(){
		self.online = false;
		if (self.socket.connected) self.socket.disconnect();
	}


	// delay this call so that the caller can set up event handlers
	window.setTimeout(function(){ self.firstconnect(); }, 0);
}

var con;

$(document).ready(function(){

	con = new serverConnection({
		host		: 'iamcal.com',
		port		: 8080,
		ping_interval	: 3000, // also the reconnect timer
		giveup_interval	: 10000
	});

	con.on('status', function(online, status, lag){
		if (online){
			$('#con').addClass('online');
			$('#lag').text(lag ? lag+'ms' : status);
		}else{
			$('#con').removeClass('online');
			$('#lag').text(status);
		}
	});

	con.on('message', function(msg){

		console.log('got a message!', msg);
	});
});

</script>
<style>

#con {
	width: 16px;
	height: 16px;
	border: 1px solid #000;
	background-color: red;
	margin-right: 8px;
	float: left;
}
#con.online { background-color: lime; }

</style>

<div id="statusbar">
	<div id="con"></div>
	<span id="lag">Disconnected</span>
</div>