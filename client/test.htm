<script type="text/javascript" src="json2.js"></script>
<script type="text/javascript" src="jquery.min.js"></script>
<script type="text/javascript" src="socket.io.js"></script>
<script type="text/javascript">

io.setPath('./');


function serverConnection(config){

	var self = this;

	this.config = config;
	this.online = false;
	this.pingTimer = null;
	this.giveupTimer = null;
	this.lastConnected = 0;
	this.eventHandlers = {};

	this.socket = new io.Socket(config.host, {
		port: config.port
		//transports: ['xhr-polling']
	});


	//
	// set up the socket object
	//

	this.socket.on('connect', function(){

		self.lastConnected = new Date().getTime();

		self.emit('connected');
		self.emit('status', true, 'Connected', 0);
	});

	this.socket.on('close', function(){
		//console.log('closed');
	});

	this.socket.on('disconnect', function(){

		self.emit('disconnected');
		self.emit('status', false, 'Disconnected');

		// if we get disconnected, we will immediately
		// try to reconnect. if we went offline on purpose,
		// self.online will be false so reconnect() will
		// just no-op.

		self.reconnect();
	});

	this.socket.on('message', function(data){

		if (data.msg == 'pong'){
			if (!self.socket.connected) return;
			var diff = (new Date().getTime()) - data.t;
			if (diff < 0) diff = 0;
			self.emit('status', true, 'Connected', diff);
			//console.log('lag: '+diff);
			return;
		}

		self.emit('message', data);
	});


	//
	// event handlers
	//

	this.on = function(ev, f){
		if (!self.eventHandlers[ev]){
			self.eventHandlers[ev] = [];
		}
		self.eventHandlers[ev].push(f);
	};

	this.emit = function(){
		var args = Array.prototype.slice.call(arguments);
		var ev = args.shift();
		if (self.eventHandlers[ev]){
			for (var i=0; i<self.eventHandlers[ev].length; i++){
				var f = self.eventHandlers[ev][i];
				f.apply(self, args);
			}
		}
	}


	//
	// the real guts
	//

	this.connect = function(){

		self.online = true;
		self.emit('status', false, 'Connecting...');
		self.socket.connect();
	}

	this.reconnect = function(){
		if (!self.online) return;

		// this timer is set up so that we can decide to just stop trying
		// after a certain period.
		if (self.giveupTimer) window.clearTimeout(self.giveupTimer);
		self.giveupTimer = window.setTimeout(function(){ self.giveup(); }, self.config.giveup_interval);

		// emit status change and then try to connect
		self.emit('status', false, 'Reconnecting...');
		self.socket.connect();
	}

	this.giveup = function(){
		window.clearTimeout(self.giveupTimer);
		self.giveupTimer = null;
		if (self.socket.connected) return;

		self.emit('status', false, 'Disconnected');
	}


	//
	// ping is a simple interval - if we're connected, send
	// a ping message. if not, do nothing
	//

	self.pingTimer = window.setInterval(function(){
		if (self.socket.connected){
			self.socket.send({msg: 'ping', t: new Date().getTime()});
		}
	}, self.config.ping_interval);


	//
	// toggle the client on and off
	//

	this.go_online = function(){
		if (self.socket.connected) return;
		self.online = true;
		self.reconnect();
	}

	this.go_offline = function(){
		self.online = false;
		if (self.socket.connected) self.socket.disconnect();
	}


	//
	// send a message
	//

	this.send = function(msg){
		self.socket.send(msg);
	};


	// delay this call so that the caller can set up event handlers
	window.setTimeout(function(){ self.connect(); }, 0);
}

var con;

$(document).ready(function(){

	con = new serverConnection({
		host		: 'iamcal.com',
		port		: 8080,
		ping_interval	: 3000,
		giveup_interval	: 10000
	});

	con.on('status', function(online, status, lag){
		if (online){
			$('#con').addClass('online');
			$('#lag').text(lag ? lag+'ms' : status);
		}else{
			$('#con').removeClass('online');
			$('#lag').text(status);
		}
	});

	con.on('message', function(msg){

		console.log('got a message!', msg);
	});

	con.on('connected', function(){

		con.send({msg: 'some data'});
	});
});

</script>
<style>

#con {
	width: 16px;
	height: 16px;
	border: 1px solid #000;
	background-color: red;
	margin-right: 8px;
	float: left;
}
#con.online { background-color: lime; }

</style>

<div id="statusbar">
	<div id="con"></div>
	<span id="lag">Disconnected</span>
</div>